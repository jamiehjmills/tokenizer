package hj.project.token.services.connections;

import hj.project.token.configs.TokenDb;
import lombok.SneakyThrows;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;

@Component
public class PostgresConnection implements DBConnection {

    @Autowired
    TokenDb tokenDb;
    private Connection tokenConn;
    private String schema;
    private String table;

    private static final Logger logger = LoggerFactory.getLogger(PostgresConnection.class);

    /**
     * Creating a schema and table if they don't exist in the database
     */
    @Override
    @SneakyThrows
    public void startConnecting() {

        tokenConn = DriverManager.getConnection(tokenDb.getUrl(), tokenDb.getUser(), tokenDb.getPw());
        schema = tokenDb.getSchema();
        table = tokenDb.getTable();

        try {

            tokenConn.prepareStatement(String.format("create schema IF NOT EXISTs %s", schema)).execute();
            logger.info(String.format("Schema(%s) has been completed", schema));

            String sql = String.format("CREATE TABLE IF NOT EXISTS %s" +
                    "(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    " token VARCHAR(255), " +
                    " hash VARCHAR(255))", table);
            tokenConn.prepareStatement(sql).execute();
            logger.info(String.format("Table(%s) has been completed", table));

        } catch (Exception e) {
            logger.error(e.getMessage());
        }

    }

    /**
     * Inserting a token and hash into the table
     */
    @SneakyThrows
    @Override
    public void insertingHash(String token, String hash) {

        try {

            if (!checkingDuplicates(token, hash)) {
                String sql = String.format("INSERT INTO %s" +
                        "(token, hash)" +
                        "VALUES('%s','%s')", table, token, hash);
                tokenConn.prepareStatement(sql).execute();
                logger.info("Inserting has been completed");
            }

        } catch (Exception e) {
            logger.error(e.getMessage());
        }

    }

    @SneakyThrows
    public boolean checkingDuplicates(String token, String hash) {

        try {
            String sql = String.format("select id from %s " +
                    "where token = '%s' and hash = '%s'", table, token, hash);
            ResultSet rs = tokenConn.prepareStatement(sql).executeQuery();

            // if there is nothing from the DB, rs.next() returns false
            return rs.next();
        } catch (Exception e) {
            logger.warn(e.getMessage());
        }

        return false;

    }

    /**
     * Returning a hash and saving it into the list
     */
    @Override
    public String returningHash(String token) {

        String hash = null;

        try {
            String sql = String.format("select hash from %s " +
                    "where token = '%s'", table, token);
            ResultSet rs = tokenConn.prepareStatement(sql).executeQuery();

            while (rs.next()) {
                hash = rs.getString("hash");
            }
            logger.info("The list of Hash is ready");

        } catch (Exception e) {
            logger.error(e.getMessage());
        }
        return hash;
    }

}
