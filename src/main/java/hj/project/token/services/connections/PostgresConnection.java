package hj.project.token.services.connections;

import hj.project.token.configs.TokenDb;
import lombok.SneakyThrows;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

@Component
public class PostgresConnection implements DBConnection {

    @Autowired
    TokenDb tokenDb;
    private Connection tokenConn;
    private String schema;
    private String table;

    private static final Logger logger = LoggerFactory.getLogger(PostgresConnection.class);

    /**
     * Creating a schema and table if they don't exist in the database
     */
    @Override
    @SneakyThrows
    public void startConnecting() {

        tokenConn = DriverManager.getConnection(tokenDb.getUrl(), tokenDb.getUser(), tokenDb.getPw());
        schema = tokenDb.getSchema();
        table = tokenDb.getTable();

        try {

            tokenConn.prepareStatement(String.format("create schema IF NOT EXISTs %s", schema)).execute();
            logger.info(String.format("Schema(%s) has been completed", schema));

            String sql = String.format("CREATE TABLE IF NOT EXISTS %s" +
                    "(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    " token VARCHAR(255), " +
                    " hash VARCHAR(255))", table);
            tokenConn.prepareStatement(sql).execute();
            logger.info(String.format("Table(%s) has been completed", table));

        } catch (SQLException e) {
            logger.warn(e.getMessage());
        }

    }

    /**
     * Inserting token and hash into the table
     */
    @SneakyThrows
    @Override
    public void insertingHash(String token, String hash) {

        try {
            String sql = String.format("INSERT INTO %s" +
                    "(token, hash)" +
                    "VALUES('%s','%s')", table, token, hash);
            tokenConn.prepareStatement(sql).execute();
            logger.info("Inserting has been completed");

        } catch (SQLException e) {
            logger.warn(e.getMessage());
        }

    }

    /**
     * Returning a hash and saving it into the list
     */
    public List<String> returningHash(String token) {

        List<String> list = new ArrayList<>();

        try {
            String sql = String.format("select hash from %s " +
                    "where token = '%s'", table, token);
            ResultSet rs = tokenConn.prepareStatement(sql).executeQuery();

            while (rs.next()) {

                String hash = rs.getString("hash");
                list.add(hash);

            }

            logger.info("The list of Hash is ready");

        } catch (SQLException e) {
            logger.warn(e.getMessage());
        }

        return list;
    }

}
