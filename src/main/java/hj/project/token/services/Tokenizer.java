package hj.project.token.services;

import hj.project.token.configs.ConfigProperties;
import hj.project.token.configs.TokenDb;
import hj.project.token.connections.PostgresConnection;
import lombok.SneakyThrows;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

@RestController
public class Tokenizer implements MainTokenizer{

    @Autowired
    ConfigProperties configProp;

    @Autowired
    TokenDb tokenDb;

    private static final Logger logger = LoggerFactory.getLogger(Tokenizer.class);


    @PostMapping("/test")
    @SneakyThrows
    public String getFoos(@RequestParam String id){

        Connection tokenConn = DriverManager.getConnection(tokenDb.getUrl(), tokenDb.getUser(), tokenDb.getPw());
        logger.info("Connecting...");

        try{
            String schema =  tokenDb.getSchema();
            String table = tokenDb.getTable();

            tokenConn.prepareStatement(String.format("create schema IF NOT EXISTs %s", schema)).execute();
            logger.info("Schema, %s ,update has been completed",schema);

//            String sql = String.format("CREATE TABLE IF NOT EXISTS %s.%s " +
//                    "(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
//                    " token VARCHAR(255), " +
//                    " hashedWord VARCHAR(255))", table);
//            tokenConn.prepareStatement(sql).execute();
//            logger.info("Table, %s ,update has been completed",table);

        } catch (SQLException e) {
            logger.warn(e.getMessage());
        }

        System.out.println("ID: " + tokenDb.getDb()); //works
        System.out.println(configProp.getConfigValue(("token.db"))); //works
        return id;


    }

    @Override
    public void init() {

    }

    public String returnToken(String value) {
        return null;
    }

}
