package hj.project.token.connections;

import hj.project.token.configs.ConfigProperties;
import hj.project.token.configs.TokenDb;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class PostgresConnection implements DBConnection {

    @Autowired
    TokenDb tokenDb;

    private static final Logger logger = LoggerFactory.getLogger(PostgresConnection.class);

    private Connection tokenConn;
    private String schema;
    private String table;

    @SneakyThrows
    public PostgresConnection(){

        tokenConn = DriverManager.getConnection(tokenDb.getUrl(), tokenDb.getUser(), tokenDb.getPw());
        schema = tokenDb.getSchema();
        table = tokenDb.getTable();

    }

    @Override
    @SneakyThrows
    public void startConnecting() {

        try {

            tokenConn.prepareStatement(String.format("create schema IF NOT EXISTs %s", schema)).execute();
            logger.info(String.format("Schema(%s) has been completed", schema));

            String sql = String.format("CREATE TABLE IF NOT EXISTS %s" +
                    "(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    " hashedWord VARCHAR(255))", table);
            tokenConn.prepareStatement(sql).execute();
            logger.info(String.format("Table(%s) has been completed", table));

        } catch (SQLException e) {
            logger.warn(e.getMessage());
        }

    }
    @SneakyThrows
    public void insertHash(String input, String token){
        try {
            String sql = String.format("INSERT INTO %s" +
                    "(id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    " token VARCHAR(255), " +
                    " hashedWord VARCHAR(255))", table);
            tokenConn.prepareStatement(sql).execute();
            logger.info(String.format("Table(%s) has been completed", table));

        } catch (SQLException e) {
            logger.warn(e.getMessage());
        }

    }
//
//    INSERT INTO "token"."storage"
//            ("token", hashedword)
//    VALUES('', '');


    public String returnHash(){
        return null;
    }

}
